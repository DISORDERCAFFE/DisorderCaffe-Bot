from pytube import YouTube
from youtubesearchpython import VideosSearch
import os
from telegram import Update
from telegram.ext import CallbackContext

async def search_and_send_song(update: Update, context: CallbackContext):
    try:
        query = update.message.text
        await update.message.reply_text("üîç –ò—â–µ–º –ø–µ—Å–Ω—é...")

        search = VideosSearch(query, limit=1)
        results = search.result()

        if not results["result"]:
            await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        video_url = results["result"][0]["link"]
        yt = YouTube(video_url)
        
        # –§–∏–∫—Å –¥–ª—è pytube: –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∞—É–¥–∏–æ
        audio_stream = yt.streams.filter(only_audio=True, file_extension='mp4').first()
        
        if not audio_stream:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ!")
            return

        await update.message.reply_text("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º...")
        out_file = audio_stream.download(filename="song.mp3")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .mp4 –≤ .mp3 (pytube —Å–∫–∞—á–∏–≤–∞–µ—Ç –∫–∞–∫ .mp4)
        os.rename(out_file, "song.mp3")
        
        await update.message.reply_audio(audio=open("song.mp3", "rb"))
        os.remove("song.mp3")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")