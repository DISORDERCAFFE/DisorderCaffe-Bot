import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)
from telegram.error import Conflict, NetworkError, TelegramError
from dotenv import load_dotenv
from music import search_and_send_song
from feedback import send_to_admin
import requests  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")  # –î–æ–±–∞–≤–ª–µ–Ω–æ

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
KEYBOARD = [
    ["üìú –ü—Ä–∞–≤–∏–ª–∞", "‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
    ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üéµ –ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é"],
    ["üì© –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ö–∞—Ñ–µ—à–∫—É"]
]

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –í–æ—Å—Ç–æ—á–Ω—ã–º–∏ –ú—É–¥—Ä–µ—Ü–∞–º–∏ (DeepSeek)
class EasternSages:
    @staticmethod
    async def ask_sages(question: str) -> str:
        """–ó–∞–ø—Ä–æ—Å –∫ –í–æ—Å—Ç–æ—á–Ω—ã–º –ú—É–¥—Ä–µ—Ü–∞–º (DeepSeek API)"""
        try:
            headers = {
                "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                "Content-Type": "application/json"
            }
            data = {
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": question}],
                "temperature": 0.7
            }
            response = requests.post(
                "https://api.deepseek.com/v1/chat/completions",
                headers=headers,
                json=data
            )
            return response.json()["choices"][0]["message"]["content"]
        except Exception as e:
            return f"‚ö†Ô∏è –ú—É–¥—Ä–µ—Ü—ã –∑–∞–Ω—è—Ç—ã –º–µ–¥–∏—Ç–∞—Ü–∏–µ–π, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: {str(e)}"

class TelegramBot:
    def __init__(self):
        self.app = None
        self.shutdown_event = asyncio.Event()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if not all([BOT_TOKEN, ADMIN_ID, DEEPSEEK_API_KEY]):
            raise ValueError("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª—é—á–µ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")

    async def start(self, update: Update, context: CallbackContext):
        keyboard = ReplyKeyboardMarkup(KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ—Ç DISORDER CAFFE c –º—É–∑—ã–∫–æ–π –∏ –í–æ—Å—Ç–æ—á–Ω—ã–º–∏ –ú—É–¥—Ä–µ—Ü–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

    async def handle_message(self, update: Update, context: CallbackContext):
        text = update.message.text

        if text == "üìú –ü—Ä–∞–≤–∏–ª–∞":
            await update.message.reply_text("üìå –ü—Ä–∞–≤–∏–ª–∞:\n1. –ù–µ –≤–∞–ª—å—Ç—É–π\n2. –ù–µ —Å–Ω–æ—Å–∏ –∑–∞–±–æ—Ä—ã")

        elif text == "‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏":
            await update.message.reply_text(
                "‚ö°Ô∏è –Ø —É–º–µ—é:\n"
                "- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –í–æ—Å—Ç–æ—á–Ω—ã–º–∏ –ú—É–¥—Ä–µ—Ü–∞–º–∏\n"
                "- –ò—Å–∫–∞—Ç—å –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º—É–∑—ã–∫—É\n"
                "- –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ö–∞—Ñ–µ—à–∫—É"
            )

        elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —è –∑–∞–≥–æ–Ω—é –µ–≥–æ –ú—É–¥—Ä–µ—Ü–∞–º:")
            context.user_data["awaiting_question"] = True

        elif text == "üéµ –ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é":
            await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:")
            context.user_data["awaiting_song"] = True

        elif text == "üì© –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ö–∞—Ñ–µ—à–∫—É":
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è —Ç–æ–ª–∫–Ω—É –µ–≥–æ –Ω–∞ Tokyo:")
            context.user_data["awaiting_feedback"] = True

        elif context.user_data.get("awaiting_question"):
            answer = await EasternSages.ask_sages(text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
            await update.message.reply_text(f"üßô‚Äç‚ôÇÔ∏è –ú—É–¥—Ä–µ—Ü—ã –æ—Ç–≤–µ—Ç–∏–ª–∏:\n\n{answer}")
            context.user_data["awaiting_question"] = False

        elif context.user_data.get("awaiting_song"):
            await search_and_send_song(update, context)
            context.user_data["awaiting_song"] = False

        elif context.user_data.get("awaiting_feedback"):
            await send_to_admin(update, context, ADMIN_ID)
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–ª–µ—Ç–µ–ª–æ –≤ –ö–∞—Ñ–µ—à–∫—É!")
            context.user_data["awaiting_feedback"] = False

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async def main():
    bot = TelegramBot()
    try:
        await bot.run()
    except asyncio.CancelledError:
        await bot.stop()
    except ValueError as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ValueError as e:
        print(f"üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")