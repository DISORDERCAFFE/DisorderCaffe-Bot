import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)
from telegram.error import Conflict, NetworkError, TelegramError
from dotenv import load_dotenv
from music import search_and_send_song
from deepseek import ask_deepseek
from feedback import send_to_admin

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
KEYBOARD = [
    ["üìú –ü—Ä–∞–≤–∏–ª–∞", "‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
    ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üéµ –ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é"],
    ["üì© –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ö–∞—Ñ–µ—à–∫—É"]
]

class TelegramBot:
    def __init__(self):
        self.app = None
        self.shutdown_event = asyncio.Event()

    async def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = ReplyKeyboardMarkup(KEYBOARD, resize_keyboard=True)
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ—Ç DISORDER CAFFE c –º—É–∑—ã–∫–æ–π –∏ –í–æ—Å—Ç–æ—á–Ω—ã–º–∏ –ú—É–¥—Ä–µ—Ü–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

    async def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text

        if text == "üìú –ü—Ä–∞–≤–∏–ª–∞":
            await update.message.reply_text("üìå –ü—Ä–∞–≤–∏–ª–∞:\n1. –ù–µ –≤–∞–ª—å—Ç—É–π\n2. –ù–µ —Å–Ω–æ—Å–∏ –∑–∞–±–æ—Ä—ã")

        elif text == "‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏":
            await update.message.reply_text(
                "‚ö°Ô∏è –Ø —É–º–µ—é:\n"
                "- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–µ—Ä–µ–∑ –ú—É–¥—Ä–µ—Ü–æ–≤\n"
                "- –ò—Å–∫–∞—Ç—å –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º—É–∑—ã–∫—É\n"
                "- –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ö–∞—Ñ–µ—à–∫—É"
            )

        elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —è –∑–∞–≥–æ–Ω—é –µ–≥–æ –Ω–∞ –í–æ—Å—Ç–æ—á–Ω—ã—Ö –ú—É–¥—Ä–µ—Ü–æ–≤:")
            context.user_data["awaiting_question"] = True

        elif text == "üéµ –ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é":
            await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:")
            context.user_data["awaiting_song"] = True

        elif text == "üì© –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ö–∞—Ñ–µ—à–∫—É":
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è —Ç–æ–ª–∫–Ω—É –µ–≥–æ –Ω–∞ Tokyo:")
            context.user_data["awaiting_feedback"] = True

        elif context.user_data.get("awaiting_question"):
            answer = await ask_deepseek(text)
            await update.message.reply_text(f"ü§ñ –ú—É–¥—Ä–µ—Ü—ã –æ—Ç–≤–µ—Ç–∏–ª–∏:\n\n{answer}")
            context.user_data["awaiting_question"] = False

        elif context.user_data.get("awaiting_song"):
            await search_and_send_song(update, context)
            context.user_data["awaiting_song"] = False

        elif context.user_data.get("awaiting_feedback"):
            await send_to_admin(update, context, ADMIN_ID)
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            context.user_data["awaiting_feedback"] = False

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        while not self.shutdown_event.is_set():
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
                self.app = Application.builder().token(BOT_TOKEN).build()
                
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                self.app.add_handler(CommandHandler("start", self.start))
                self.app.add_handler(
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
                )

                print("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
                await self.app.run_polling(drop_pending_updates=True)

            except (Conflict, NetworkError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await self.safe_shutdown()
                await asyncio.sleep(5)

            except TelegramError as e:
                print(f"üö® –û—à–∏–±–∫–∞ Telegram: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                await self.safe_shutdown()
                await asyncio.sleep(10)

            except Exception as e:
                print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
                await self.safe_shutdown()
                await asyncio.sleep(15)

    async def safe_shutdown(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        if self.app:
            try:
                await self.app.shutdown()
                await self.app.updater.stop()
            except:
                pass
            finally:
                self.app = None

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.shutdown_event.set()
        await self.safe_shutdown()

async def main():
    bot = TelegramBot()
    try:
        await bot.run()
    except asyncio.CancelledError:
        await bot.stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")